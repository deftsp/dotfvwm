#key bindings {{{1

# Handle some Mouse bindings now...
# Recall that mouse formats look like this:
#
# +------------+
# | ||  ||  || |
# |	           |
# +------------+
#   1   3   2

# Binding Functions
#
# "I" stands for Immediate
# "M" stands for Motion
# "C" stands for Click
# "H" stands for Hold
# "D" stands for Double Click

# ---------------------------------------------------------------------------
# Contexts:
#     R = Root Window                 rrrrrrrrrrrrrrrrrrrrrr
#     W = Application Window          rIrrrrFSSSSSSSSSFrrrrr
#     F = Frame Corners               rrrrrrS13TTTT642Srrrrr
#     S = Frame Sides                 rIrrrrSwwwwwwwwwSrrrrr
#     T = Title Bar                   rrrrrrSwwwwwwwwwSrrrrr
#     I = Icon                        rIrrrrFSSSSSSSSSFrrrrr
#                                     rrrrrrrrrrrrrrrrrrrrrr
# Numbers are buttons: 1 3 5 7 9   0 8 6 4 2
#
# Modifiers: (A)ny, (C)ontrol, (S)hift, (M)eta, (N)othing
# ---------------------------------------------------------------------------



#definitions hint:
#Key / Mouse Button Context Modifiers Function
#Defines a mouse binding, or removes the binding if Function is
#'-'. Button is the mouse button number. If Button is zero then any
#button performs the specified function.

#
#Context
#   'R' for the root window,
#   'W' for an application window,
#   'D' for a desktop application ,
#   'T' for a window title-bar,
#   'S' for a window side, top, or bottom bar,
#   '[', ']','-' and '_' for the left, right, top or bottom side only,
#   'F' for a window frame (the corners),
#   '<', '^', '>' and 'v' for the top left, top right, bottom right or bottom left corner,
#   'I' for an Icon window,
#   '0' through '9' for title-bar buttons,
#   'A' is for any context.
#
#Modifiers  'N' for no modifiers,  'C' for control,  'S' for shift,  'M' for Meta,
#           'L' for Caps-Lock, 'A' for any modifier,  1-5    mod1 through mod5
#           modifier 'L' is ignored (see  IgnoreModifiers)


Mouse 1 1 A DestroyOnHold
Mouse 3 1 A Menu MenuFvwmWindowOps
Mouse 3 W 4 Menu MenuFvwmWindowOps
Mouse 1 3 A Max
Mouse 1 5 A Iconify

Mouse 1 FSTW   M FuncFvwmRaiseLowerX Move

Mouse 4 FSTW   S Exec exec transset-df --min 0.1 -p --dec 0.2
Mouse 5 FSTW   S Exec exec transset-df -p --inc 0.1

# Mouse 1 I A PlaceIcon
# Mouse 1 1 A Menu MenuFvwmWindowOps
# Mouse 1 2 A close
# Mouse 2 R A WindowList
# Mouse 1 4 A Max
# Mouse 3 4 A Maximize2
# Mouse 2 T A CentreWindow 0 0 Animated
# Mouse 1 6 A Iconify
# Mouse 4 T A WindowShade true
# Mouse 5 T A WindowShade false
# Mouse 3 T A RaiseAndResize
# Mouse 4 R A WheelScroll down
# Mouse 5 R A WheelScroll up
# Mouse 3 R A Menu MenuFvwmRoot

# workspace scrolling
Mouse 4 R A Scroll 100 100
Mouse 5 R A Scroll -100 -100

#####
# Name:     DestroyOnHold
# Bound:    Titlebar Button 2 (X)
# Purpose:  When clicked, Raise the window Immediately.
#           If the button is pressed and released, Close the Window. If it is pressed
#           and held, Destroy it, and issue a Beep to confirm.
#
#           There is a 100ms delay before issuing `Close` so I have a chance to see the
#           animation when the button changes from ActiveDown to ActiveUp :).
#
#################
DestroyFunc DestroyOnHold
AddToFunc DestroyOnHold I Raise
+ C Schedule 100 Close
+ H Destroy
+ H Beep

